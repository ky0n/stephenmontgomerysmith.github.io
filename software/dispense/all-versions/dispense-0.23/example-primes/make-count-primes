#!/usr/bin/perl -w

$nr_counts = 0;
while (<>) {
  chomp;
  $list{$_} = $nr_counts;
  $nr_counts++;
}

$max_neg = 0;
foreach $n (split ' ', join ' ', keys %list) {
  $max_neg = $n if $n>$max_neg;
  $n_list{$n} = 1;
}

sub sortn {
  @a = split ' ',$a;
  @b = split ' ',$b;
  for ($k=0;;$k++) {
    return 0 if $k>$#a && $k>$#b;
    return -1 if $k>$#a;
    return 1 if $k>$#b;
    return -1 if $a[$k]<$b[$k];
    return 1 if $a[$k]>$b[$k];
  }
}

$count_dec = "";
$first = 1;
$test = "\n";
foreach $n (keys %n_list) {
  $count_dec .=$first?"t$n":", t$n";
  $test .= "    t$n = !TEST(bitarray,n-".($n/2).");\n";
  $first = 0;
}

@last_l = ();
foreach $line (sort sortn keys %list) {
  @l = split ' ',$line;
  $last_depth = $#last_l + 1;
  $depth = $#l + 1;
  for ($c=0;$c<$depth && $c<$last_depth && $l[$c]==$last_l[$c];$c++){}
  for ($i=$last_depth-1;$i>=$c;$i--) {
    $test .= (' 'x(2*$i+4)) . "}\n";
  }
  for ($i=$c;$i<$depth;$i++) {
    $test .= (' 'x(2*$i+4)) . "if (t$l[$i]) {\n";
  }
  $test .= (' 'x(2*$depth+4)) . "count[$list{$line}]++;\n";
  @last_l = @l;
}
for ($i=$depth-1;$i>=0;$i--) {
  $test .= (' 'x(2*$i+4)) . "}\n";
}

foreach $m (1,7,11,13,17,19,23,29) {
  $count_dec{$m} = "";
  $first = 1;
  $test{$m} = "\n";
  foreach $n (keys %n_list) {
    if (($m-$n)%3!=0 && ($m-$n)%5!=0) {
      $count_dec{$m} .=$first?"t$n":", t$n";
      $test{$m} .= "    t$n = !TEST(bitarray,n-".($n/2).");\n";
      $first = 0;
    }
  }

  @last_l = ();
  foreach $line (sort sortn keys %list) {
    @l = split ' ',$line;
    foreach $i (@l) {
      goto n if (($m-$i)%3==0 || ($m-$i)%5==0);
    }
    $last_depth = $#last_l + 1;
    $depth = $#l + 1;
    for ($c=0;$c<$depth && $c<$last_depth && $l[$c]==$last_l[$c];$c++){}
    for ($i=$last_depth-1;$i>=$c;$i--) {
      $test{$m} .= (' 'x(2*$i+4)) . "}\n";
    }
    for ($i=$c;$i<$depth;$i++) {
      $test{$m} .= (' 'x(2*$i+4)) . "if (t$l[$i]) {\n";
    }
    $test{$m} .= (' 'x(2*$depth+4)) . "count[$list{$line}]++;\n";
    @last_l = @l;
n:
  }
  for ($i=$depth-1;$i>=0;$i--) {
    $test{$m} .= (' 'x(2*$i+4)) . "}\n";
 }
}

open(TEMP,"count-primes-template.c");
open(PROG,"> count-primes.c");

while (<TEMP>) {
  if (s/\$max_neg/$max_neg/) {}
  elsif (s/\$nr_counts/$nr_counts/) {}
  elsif (s/\$test01/$test{1}  /) {}
  elsif (s/\$test07/$test{7}  /) {}
  elsif (s/\$test11/$test{11}  /) {}
  elsif (s/\$test13/$test{13}  /) {}
  elsif (s/\$test17/$test{17}  /) {}
  elsif (s/\$test19/$test{19}  /) {}
  elsif (s/\$test23/$test{23}  /) {}
  elsif (s/\$test29/$test{29}  /) {}
  elsif (s/\$test/$test  /) {}
  elsif (s/\$count_dec01/$count_dec{1}/) {}
  elsif (s/\$count_dec07/$count_dec{7}/) {}
  elsif (s/\$count_dec11/$count_dec{11}/) {}
  elsif (s/\$count_dec13/$count_dec{13}/) {}
  elsif (s/\$count_dec17/$count_dec{17}/) {}
  elsif (s/\$count_dec19/$count_dec{19}/) {}
  elsif (s/\$count_dec23/$count_dec{23}/) {}
  elsif (s/\$count_dec29/$count_dec{29}/) {}
  elsif (s/\$count_dec/$count_dec/) {}

  print PROG $_;
}
